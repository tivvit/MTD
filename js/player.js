// Generated by CoffeeScript 1.7.1
(function() {
  var Player;

  Player = (function() {
    function Player(blockSize, gridSize, isOpponent) {
      var inner, x, y, _i, _j, _ref, _ref1;
      this.blockSize = blockSize;
      this.gridSize = gridSize;
      this.isOpponent = isOpponent;
      this.shift = 0;
      this.lives = 10;
      if (this.isOpponent == null) {
        this.isOpponent = false;
      }
      this.homePosition = {
        x: 0,
        y: 9
      };
      this.grid = {};
      this.money = 1000;
      for (x = _i = 0, _ref = this.gridSize; 0 <= _ref ? _i < _ref : _i > _ref; x = 0 <= _ref ? ++_i : --_i) {
        inner = {};
        for (y = _j = 0, _ref1 = this.gridSize; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
          inner[y] = {};
        }
        this.grid[x] = inner;
      }
      if (Object.keys(this.grid).length) {
        this.grid[this.homePosition.x][this.homePosition.y] = new Home;
      }
    }

    Player.prototype.draw = function(ctx) {
      var half, x, xx, y, _i, _j, _k, _ref, _ref1, _ref2, _results;
      this.ctx = ctx;
      this.copy = this.grid;
      if (this.isOpponent) {
        this.shift = this.gridSize * this.blockSize;
        for (y = _i = 0, _ref = this.gridSize; 0 <= _ref ? _i < _ref : _i > _ref; y = 0 <= _ref ? ++_i : --_i) {
          for (x = _j = 0, _ref1 = this.gridSize; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; x = 0 <= _ref1 ? ++_j : --_j) {
            half = this.gridSize / 2;
            xx = 0;
            if (x > half) {
              xx = Math.floor(2 / (x - half));
              this.copy[xx][y] = this.grid[x][y];
            } else if (x < half) {
              xx = (half - x) * 2;
              this.copy[xx - 1][y] = this.grid[x][y];
            }
          }
        }
      }
      _results = [];
      for (x = _k = 0, _ref2 = this.gridSize; 0 <= _ref2 ? _k < _ref2 : _k > _ref2; x = 0 <= _ref2 ? ++_k : --_k) {
        _results.push((function() {
          var _l, _ref3, _results1;
          _results1 = [];
          for (y = _l = 0, _ref3 = this.gridSize; 0 <= _ref3 ? _l < _ref3 : _l > _ref3; y = 0 <= _ref3 ? ++_l : --_l) {
            if (Object.keys(this.copy[x][y]).length) {
              _results1.push(this.copy[x][y].draw(this.ctx, this.shift + x * this.blockSize, y * this.blockSize));
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Player.prototype.clone = function(obj) {
      var key, newInstance;
      if ((obj == null) || typeof obj !== 'object') {
        return obj;
      }
      newInstance = new obj.constructor();
      for (key in obj) {
        newInstance[key] = this.clone(obj[key]);
      }
      return newInstance;
    };

    window.Player = Player;

    return Player;

  })();

}).call(this);

//# sourceMappingURL=player.map
