// Generated by CoffeeScript 1.7.1
(function() {
  define([], function() {
    var Shot;
    return Shot = (function() {
      function Shot(x, y, ex, ey, enemy, type) {
        this.x = x;
        this.y = y;
        this.ex = ex;
        this.ey = ey;
        this.enemy = enemy;
        this.type = type;
        this.name = "Shot";
        this.x *= 30;
        this.y *= 30;
        this.x += 15;
        this.y += 15;
        this.ex += 15;
        this.ey += 15;
        this.xx = this.x;
        this.yy = this.y;
        this.hit = false;
        switch (this.type) {
          case "Fire":
            this.type = "red";
            break;
          case "Water":
            this.type = "blue";
            break;
          case "Nature":
            this.type = "green";
            break;
          case "Wind":
            this.type = "white";
        }
        this.speed = .6;
        this.lastAnimated;
      }

      Shot.prototype.draw = function(ctx) {
        var dt, now;
        now = new Date().getTime();
        dt = now - (this.lastAnimated || now);
        this.lastAnimated = now;
        this.xx += ((this.ex - this.x) * (this.speed * dt)) / Math.sqrt(Math.pow(this.x - this.ex, 2) + Math.pow(this.y - this.ey, 2));
        this.yy += ((this.ey - this.y) * (this.speed * dt)) / Math.sqrt(Math.pow(this.x - this.ex, 2) + Math.pow(this.y - this.ey, 2));
        if (this.x >= this.ex) {
          if (this.y >= this.ey) {
            if (this.xx <= this.ex && this.yy <= this.ey) {
              this.hit = true;
            }
          } else {
            if (this.xx <= this.ex && this.yy >= this.ey) {
              this.hit = true;
            }
          }
        } else {
          if (this.y >= this.ey) {
            if (this.xx >= this.ex && this.yy <= this.ey) {
              this.hit = true;
            }
          } else {
            if (this.xx >= this.ex && this.yy >= this.ey) {
              this.hit = true;
            }
          }
        }
        ctx.beginPath();
        ctx.fillStyle = this.type;
        ctx.arc(this.xx, this.yy, 4, 0, 2 * Math.PI);
        return ctx.fill();
      };

      return Shot;

    })();
  });

}).call(this);

//# sourceMappingURL=shot.map
